# This is a file describing a standard autoconfiguration, do not edit.
# See custom/sample.conf for a more generic template and explanation on the syntax.

name: Test Flyer

slots:
    core:
        class: CoreUnit
    antigrav:
        class: AntiGravityGeneratorUnit
    warpdrive:
        class: WarpDriveUnit
    atmofueltank:
        class: AtmoFuelContainer
        select: all
    spacefueltank:
        class: SpaceFuelContainer
        select: all
    rocketfueltank:
        class: RocketFuelContainer
        select: all
    gyro:
        class: GyroUnit
    weapon:
        class: WeaponUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual

handlers:
    unit:
        start:
            lua: |
                Nav = Navigator.new(system, core, unit)
                Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000})
                Nav.axisCommandManager:setTargetGroundAltitude(4)

                -- element widgets
                -- For now we have to alternate between PVP and non-PVP widgets to have them on the same side.
                _autoconf.displayCategoryPanel(weapon, weapon_size, L_TEXT("ui_lua_widget_weapon", "Weapons"), "weapon", true)
                core.show()
                _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_periscope", "Periscope"), "periscope")
                placeRadar = true
                if atmofueltank_size > 0 then
                    _autoconf.displayCategoryPanel(atmofueltank, atmofueltank_size, L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"), "fuel_container")
                    if placeRadar then
                        _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                        placeRadar = false
                    end
                end
                if spacefueltank_size > 0 then
                    _autoconf.displayCategoryPanel(spacefueltank, spacefueltank_size, L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"), "fuel_container")
                    if placeRadar then
                        _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                        placeRadar = false
                    end
                end
                _autoconf.displayCategoryPanel(rocketfueltank, rocketfueltank_size, L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"), "fuel_container")
                if placeRadar then -- We either have only rockets or no fuel tanks at all, uncommon for usual vessels
                    _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                    placeRadar = false
                end
                if antigrav ~= nil then antigrav.show() end
                if warpdrive ~= nil then warpdrive.show() end
                if gyro ~= nil then gyro.show() end

                -- freeze the player in he is remote controlling the construct
                if Nav.control.isRemoteControlled() == 1 then
                    system.freeze(1)
                end

                -- landing gear
                -- make sure every gears are synchonized with the first
                gearExtended = false
                if gearExtended then
                    Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)
                    Nav.control.extendLandingGears()
                else
                    Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)
                    Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
                    Nav.control.retractLandingGears()
                end

                debugPanel = system.createWidgetPanel("Debug")
                debugWidget = system.createWidget(debugPanel, "value")
                debugData1 = system.createData()
                debugData2 = system.createData()
                debugData3 = system.createData()
                debugData4 = system.createData()
                debugData5 = system.createData()
                debugData6 = system.createData()
                debugData7 = system.createData()
                debugData8 = system.createData()
                debugData9 = system.createData()
                debugData10 = system.createData()
                system.addDataToWidget(debugData1, debugWidget)
                system.addDataToWidget(debugData2, debugWidget)
                system.addDataToWidget(debugData3, debugWidget)
                system.addDataToWidget(debugData4, debugWidget)
                system.addDataToWidget(debugData5, debugWidget)
                system.addDataToWidget(debugData6, debugWidget)
                system.addDataToWidget(debugData7, debugWidget)
                system.addDataToWidget(debugData8, debugWidget)
                system.addDataToWidget(debugData9, debugWidget)
                system.addDataToWidget(debugData10, debugWidget)


                function updateValueWidgetData(widget, label, value, units)
                    local data = '{"label": "_LABEL_", "value": "_VALUE_", "unit": "_UNIT_"}'
                    data = string.gsub(data, '_LABEL_', label)
                    data = string.gsub(data, '_VALUE_', value)
                    data = string.gsub(data, '_UNIT_', units or '')
                    system.updateData(widget, data)
                end

                -- ENTERING THE MATRIX
                function createMatrix(vx, vy, vz)
                    local matrix = {
                        { vx.x, vx.y, vx.z },
                        { vy.x, vy.y, vy.z },
                        { vz.x, vz.y, vz.z }
                    }
                    return matrix
                end       
                
                function matrixToString(mat)
                    return string.format("[%+0.3f,%+0.3f,%+0.3f]\n[%+0.3f,%+0.3f,%+0.3f]\n[%+0.3f,%+0.3f,%+0.3f]\n", 
                        mat[1][1], mat[1][2], mat[1][3],
                        mat[2][1], mat[2][2], mat[2][3],
                        mat[3][1], mat[3][2], mat[3][3])
                end
                
                function getDeterminant(v1, v2, v3, v4)
                    return v1 * v4 - v2 * v3
                end
                
                function matrixTranspose(mat)
                    local mt = {{}, {}, {}}
                    
                    for r=1,3 do
                        for c=1,3 do
                            mt[r][c] = mat[c][r]
                        end
                    end
                    return mt
                end
                
                function matrixXScalar(mat, s)
                    local mt = {{}, {}, {}}
                    
                    for r=1,3 do
                        for c=1,3 do
                            mt[r][c] = mat[r][c] * s
                        end
                    end
                    return mt
                end
                
                function matrixInvert(mat)
                    local m1 = {{}, {}, {}}
                    m1[1][1] = getDeterminant(mat[2][2], mat[2][3], mat[3][2], mat[3][3])
                    m1[1][2] = -getDeterminant(mat[2][1], mat[2][3], mat[3][1], mat[3][3])
                    m1[1][3] = getDeterminant(mat[2][1], mat[2][2], mat[3][1], mat[3][2])
                
                    m1[2][1] = -getDeterminant(mat[1][2], mat[1][3], mat[3][2], mat[3][3])
                    m1[2][2] = getDeterminant(mat[1][1], mat[1][3], mat[3][1], mat[3][3])
                    m1[2][3] = -getDeterminant(mat[1][1], mat[1][2], mat[3][1], mat[3][2])
                
                    m1[3][1] = getDeterminant(mat[1][2], mat[1][3], mat[2][2], mat[2][3])
                    m1[3][2] = -getDeterminant(mat[1][1], mat[1][3], mat[2][1], mat[2][3])
                    m1[3][3] = getDeterminant(mat[1][1], mat[1][2], mat[2][1], mat[2][2])
                    
                    local det1 = mat[1][1] * m1[1][1] + mat[1][2] * m1[1][2] + mat[1][3] * m1[1][3]
                
                    return matrixXScalar(matrixTranspose(m1), 1 / det1)
                end
                
                function matrixXMatrix(m1, m2)
                    local mt = {{}, {}, {}}
                
                    for r=1,3 do
                        for c=1,3 do
                            mt[r][c] = m1[r][1] * m2[1][c] + m1[r][2] * m2[2][c] + m1[r][3] * m2[3][c]
                        end
                    end
                    return mt
                end
                
                function matrixXVec(mat, vec) 
                    local x = mat[1][1] * vec.x + mat[2][1] * vec.y + mat[3][1] * vec.z
                    local y = mat[1][2] * vec.x + mat[2][2] * vec.y + mat[3][2] * vec.z
                    local z = mat[1][3] * vec.x + mat[2][3] * vec.y + mat[3][3] * vec.z
                    return vec3(x, y, z)
                end
                -- LEAVING THE MATRIX

                startPos = vec3(core.getConstructWorldPos())

                -- local vRight = vec3(core.getConstructWorldOrientationRight())
                -- local vFront = vec3(core.getConstructWorldOrientationForward())
                -- local vUp = vec3(core.getConstructWorldOrientationUp())

                local vUp = vec3(core.getWorldVertical())
                local vRight = vUp:cross(vec3(0, 0, 1)):normalize_inplace()
                local vFront = vUp:cross(vRight):normalize_inplace()
                local cvMat = createMatrix(vRight, vFront, vUp)

                ivMat = matrixInvert(cvMat)
                worldUp = vUp
            
        stop:
            lua: |
                _autoconf.hideCategoryPanels()
                if antigrav ~= nil then antigrav.hide() end
                if warpdrive ~= nil then warpdrive.hide() end
                if gyro ~= nil then gyro.hide() end
                core.hide()
                Nav.control.switchOffHeadlights()

    system:
        start:
            lua: |
                pitchInput = 0
                rollInput = 0
                yawInput = 0
                brakeInput = 0
        flush:
            lua: |
                -- constants: use 'myvar = defaultValue --export: description' to expose the variable in context menu

                local pitchSpeedFactor = 0.8 --export: This factor will increase/decrease the player input along the pitch axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local yawSpeedFactor =  1 --export: This factor will increase/decrease the player input along the yaw axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
                local brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local autoRoll = true --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
                local autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01

                local turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
                local turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local torqueFactor = 2 -- Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                -- validate params
                pitchSpeedFactor = math.max(pitchSpeedFactor, 0.01)
                yawSpeedFactor = math.max(yawSpeedFactor, 0.01)
                rollSpeedFactor = math.max(rollSpeedFactor, 0.01)
                torqueFactor = math.max(torqueFactor, 0.01)
                brakeSpeedFactor = math.max(brakeSpeedFactor, 0.01)
                brakeFlatFactor = math.max(brakeFlatFactor, 0.01)
                autoRollFactor = math.max(autoRollFactor, 0.01)
                turnAssistFactor = math.max(turnAssistFactor, 0.01)

                -- final inputs
                local finalPitchInput = pitchInput + system.getControlDeviceForwardInput()
                local finalRollInput = rollInput + system.getControlDeviceYawInput()
                local finalYawInput = yawInput - system.getControlDeviceLeftRightInput()
                local finalBrakeInput = brakeInput

                -- Axis
                local worldVertical = vec3(core.getWorldVertical()) -- along gravity
                local constructUp = vec3(core.getConstructWorldOrientationUp())
                local constructForward = vec3(core.getConstructWorldOrientationForward())
                local constructRight = vec3(core.getConstructWorldOrientationRight())
                local constructVelocity = vec3(core.getWorldVelocity())
                local constructVelocityDir = vec3(core.getWorldVelocity()):normalize()
                local currentRollDeg = getRoll(worldVertical, constructForward, constructRight)
                local currentRollDegAbs = math.abs(currentRollDeg)
                local currentRollDegSign = utils.sign(currentRollDeg)

                -- Rotation
                local constructAngularVelocity = vec3(core.getWorldAngularVelocity())
                local targetAngularVelocity = finalPitchInput * pitchSpeedFactor * constructRight
                                                + finalRollInput * rollSpeedFactor * constructForward
                                                + finalYawInput * yawSpeedFactor * constructUp

                -- In atmosphere?
                if worldVertical:len() > 0.01 and unit.getAtmosphereDensity() > 0.0 then
                    local autoRollRollThreshold = 1.0
                    -- autoRoll on AND currentRollDeg is big enough AND player is not rolling
                    if autoRoll == true and currentRollDegAbs > autoRollRollThreshold and finalRollInput == 0 then
                        local targetRollDeg = utils.clamp(0,currentRollDegAbs-30, currentRollDegAbs+30);  -- we go back to 0 within a certain limit
                        if (rollPID == nil) then
                            rollPID = pid.new(autoRollFactor * 0.01, 0, autoRollFactor * 0.1) -- magic number tweaked to have a default factor in the 1-10 range
                        end
                        rollPID:inject(targetRollDeg - currentRollDeg)
                        local autoRollInput = rollPID:get()

                        targetAngularVelocity = targetAngularVelocity + autoRollInput * constructForward
                    end
                    local turnAssistRollThreshold = 20.0
                    -- turnAssist AND currentRollDeg is big enough AND player is not pitching or yawing
                    if turnAssist == true and currentRollDegAbs > turnAssistRollThreshold and finalPitchInput == 0 and finalYawInput == 0 then
                        local rollToPitchFactor = turnAssistFactor * 0.1 -- magic number tweaked to have a default factor in the 1-10 range
                        local rollToYawFactor = turnAssistFactor * 0.025 -- magic number tweaked to have a default factor in the 1-10 range

                        -- rescale (turnAssistRollThreshold -> 180) to (0 -> 180)
                        local rescaleRollDegAbs = ((currentRollDegAbs - turnAssistRollThreshold) / (180 - turnAssistRollThreshold)) * 180
                        local rollVerticalRatio = 0
                        if rescaleRollDegAbs < 90 then
                            rollVerticalRatio = rescaleRollDegAbs / 90
                        elseif rescaleRollDegAbs < 180 then
                            rollVerticalRatio = (180 - rescaleRollDegAbs) / 90
                        end

                        rollVerticalRatio = rollVerticalRatio * rollVerticalRatio

                        local turnAssistYawInput = - currentRollDegSign * rollToYawFactor * (1.0 - rollVerticalRatio)
                        local turnAssistPitchInput = rollToPitchFactor * rollVerticalRatio

                        targetAngularVelocity = targetAngularVelocity
                                            + turnAssistPitchInput * constructRight
                                            + turnAssistYawInput * constructUp
                    end
                end

                -- Engine commands
                local keepCollinearity = 1 -- for easier reading
                local dontKeepCollinearity = 0 -- for easier reading
                local tolerancePercentToSkipOtherPriorities = 1 -- if we are within this tolerance (in%), we don't go to the next priorities

                -- Rotation
                local angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)
                local airAcceleration = vec3(core.getWorldAirFrictionAngularAcceleration())
                angularAcceleration = angularAcceleration - airAcceleration -- Try to compensate air friction
                Nav:setEngineTorqueCommand('torque', angularAcceleration, keepCollinearity, 'airfoil', '', '', tolerancePercentToSkipOtherPriorities)

                -- Brakes
                local brakeAcceleration = -finalBrakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)
                Nav:setEngineForceCommand('brake', brakeAcceleration)

                -- AutoNavigation regroups all the axis command by 'TargetSpeed'
                local autoNavigationEngineTags = ''
                local autoNavigationAcceleration = vec3()
                local autoNavigationUseBrake = false

                -- Longitudinal Translation
                local longitudinalEngineTags = 'thrust analog longitudinal'
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byThrottle) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)
                    Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
                elseif  (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. longitudinalEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + longitudinalAcceleration
                    if (Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal) == 0 or -- we want to stop
                        Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal) < - Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal) * 0.5) -- if the longitudinal velocity would need some braking
                    then
                        autoNavigationUseBrake = true
                    end

                end

                -- Lateral Translation
                local lateralStrafeEngineTags = 'thrust analog lateral'
                local lateralCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)
                if (lateralCommandType == axisCommandType.byThrottle) then
                    local lateralStrafeAcceleration =  Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lateralStrafeEngineTags,axisCommandId.lateral)
                    Nav:setEngineForceCommand(lateralStrafeEngineTags, lateralStrafeAcceleration, keepCollinearity)
                elseif  (lateralCommandType == axisCommandType.byTargetSpeed) then
                    local lateralAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. lateralStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + lateralAcceleration
                end

                -- Vertical Translation
                local verticalStrafeEngineTags = 'thrust analog vertical'
                local verticalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)
                if (verticalCommandType == axisCommandType.byThrottle) then
                    local verticalStrafeAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(verticalStrafeEngineTags,axisCommandId.vertical)
                    Nav:setEngineForceCommand(verticalStrafeEngineTags, verticalStrafeAcceleration, keepCollinearity, 'airfoil', 'ground', '', tolerancePercentToSkipOtherPriorities)
                elseif  (verticalCommandType == axisCommandType.byTargetSpeed) then
                    local verticalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. verticalStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + verticalAcceleration
                end

                -- Auto Navigation (Cruise Control)
                if (autoNavigationAcceleration:len() > constants.epsilon) then
                    if (brakeInput ~= 0 or autoNavigationUseBrake or math.abs(constructVelocityDir:dot(constructForward)) < 0.95)  -- if the velocity is not properly aligned with the forward
                    then
                        autoNavigationEngineTags = autoNavigationEngineTags .. ', brake'
                    end
                    Nav:setEngineForceCommand(autoNavigationEngineTags, autoNavigationAcceleration, dontKeepCollinearity, '', '', '', tolerancePercentToSkipOtherPriorities)
                end

                -- Rockets
                Nav:setBoosterCommand('rocket_engine')

        update:
            lua: |
                Nav:update()
                local worldUp = vec3(core.getWorldVertical())
                local currentPos = vec3(core.getConstructWorldPos())
                -- local deltaPos = currentPos - startPos
                -- local transPos = matrixXVec(ivMat, deltaPos)
                -- updateValueWidgetData(debugData1, 'x', transPos.x)
                -- updateValueWidgetData(debugData2, 'y', transPos.y)
                -- updateValueWidgetData(debugData3, 'z', transPos.z)

                -- updateValueWidgetData(debugData1, 'x', worldUp.x)
                -- updateValueWidgetData(debugData2, 'y', worldUp.y)
                -- updateValueWidgetData(debugData3, 'z', worldUp.z)
                
                -- local cRight = vec3(core.getConstructWorldOrientationRight())
                -- local cFront = worldUp:cross(cRight):normalize_inplace()
                -- local transFront = matrixXVec(ivMat, cFront)
                -- local dp = transFront:dot(vec3(0, 1, 0))
                -- local angle = math.acos(dp) * constants.rad2deg

                -- if transFront.x > 0 then
                --     angle = 360 - angle
                -- end

                -- updateValueWidgetData(debugData4, 'compass', angle)

                -- local xy = vec3(worldUp.x, worldUp.y, 0):normalize_inplace()
                -- local angle = math.atan(xy.y / xy.x) * constants.rad2deg

                -- if xy.x > 0 then 
                --     if xy.y > 0 then
                --         angle = -180 + angle
                --     else
                --         angle = 180 + angle
                --     end
                -- end
                -- updateValueWidgetData(debugData5, 'long', angle)


                -- local yz = vec3(0, xy:len(), worldUp.z):normalize_inplace()
                -- local angle = math.atan(-yz.z / yz.y) * constants.rad2deg
                -- updateValueWidgetData(debugData6, 'lat', angle)

                local planetDepth = 83400
                local alt = core.getAltitude()
                local toCenter = vec3(core.getWorldGravity()):normalize_inplace() * (planetDepth + alt)
                local theCenter = vec3(core.getConstructWorldPos()) + toCenter

                -- updateValueWidgetData(debugData5, 'x', theCenter.x)
                -- updateValueWidgetData(debugData6, 'y', theCenter.y)
                -- updateValueWidgetData(debugData7, 'z', theCenter.z)

                local posString = "::pos{0,26,-7.0003,3.5808,67.6127}"
                updateValueWidgetData(debugData1, 'pos', posString)

                system, planet, lat, long, alt = posString:match("([%d//.-]+),([%d//.-]+),([%d//.-]+),([%d//.-]+),([%d//.-]+)")

                updateValueWidgetData(debugData2, 'lat', lat)
                updateValueWidgetData(debugData3, 'long', long)
                updateValueWidgetData(debugData4, 'alt', alt)

                local z = -math.sin(lat * constants.deg2rad)
                local xy = math.cos(lat * constants.deg2rad)

                local x = xy * -math.cos(long * constants.deg2rad)
                local y = xy * -math.sin(long * constants.deg2rad)

                local distFromCenter = alt + planetDepth
                vFrom = vec3(x, y, z)
                vPos = vFrom * -distFromCenter + theCenter
                dPos = vPos - currentPos

                -- updateValueWidgetData(debugData5, 'x', dPos.x)
                -- updateValueWidgetData(debugData6, 'y', dPos.y)
                -- updateValueWidgetData(debugData7, 'z', dPos.z)

                updateValueWidgetData(debugData5, 'x', vFrom.x)
                updateValueWidgetData(debugData6, 'y', vFrom.y)
                updateValueWidgetData(debugData7, 'z', vFrom.z)

                updateValueWidgetData(debugData8, 'up.x', worldUp.x)
                updateValueWidgetData(debugData9, 'up.y', worldUp.y)
                updateValueWidgetData(debugData10, 'up.z', worldUp.z)

        actionStart:
            args: [gear]
            lua: |
                gearExtended = not gearExtended
                if gearExtended then
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)
                    Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                    Nav.control.extendLandingGears()
                else
                    Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)
                    Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
                    Nav.control.retractLandingGears()
                end

        actionStart:
            args: [light]
            lua: |
                if Nav.control.isAnyHeadlightSwitchedOn() == 1 then
                    Nav.control.switchOffHeadlights()
                else
                    Nav.control.switchOnHeadlights()
                end

        actionStart:
            args: [forward]
            lua: pitchInput = pitchInput - 1
        actionStop:
            args: [forward]
            lua: pitchInput = pitchInput + 1
        actionStart:
            args: [backward]
            lua: pitchInput = pitchInput + 1
        actionStop:
            args: [backward]
            lua: pitchInput = pitchInput - 1
        actionStart:
            args: [left]
            lua: rollInput = rollInput - 1
        actionStop:
            args: [left]
            lua: rollInput = rollInput + 1
        actionStart:
            args: [right]
            lua: rollInput = rollInput + 1
        actionStop:
            args: [right]
            lua: rollInput = rollInput - 1

        actionStart:
            args: [straferight]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)
        actionStop:
            args: [straferight]
            lua: Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)

        actionStart:
            args: [strafeleft]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)
        actionStop:
            args: [strafeleft]
            lua: Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)

        actionStart:
            args: [up]
            lua: |
                if not gearExtended then
                    Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)
                end
        actionStop:
            args: [up]
            lua: |
                if not gearExtended then
                    Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)
                    Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
                end
        actionStart:
            args: [down]
            lua: |
                if not gearExtended then
                    Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)
                end
        actionStop:
            args: [down]
            lua: |
                if not gearExtended then
                    Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)
                    Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
                end

        actionStart:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)

        actionLoop:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)


        actionStart:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)

        actionLoop:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)

        actionStart:
            args: [yawright]
            lua: yawInput = yawInput - 1
        actionStop:
            args: [yawright]
            lua: yawInput = yawInput + 1
        actionStart:
            args: [yawleft]
            lua: yawInput = yawInput + 1
        actionStop:
            args: [yawleft]
            lua: yawInput = yawInput - 1
        actionStart:
            args: [brake]
            lua: |
                brakeInput = brakeInput + 1
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                    if (math.abs(targetSpeed) > constants.epsilon) then
                        Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                    end
                end
        actionStop:
            args: [brake]
            lua: brakeInput = brakeInput - 1

        actionLoop:
            args: [brake]
            lua: |
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                    if (math.abs(targetSpeed) > constants.epsilon) then
                        Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                    end
                end
        actionStart:
            args: [booster]
            lua: Nav:toggleBoosters()
        actionStart:
            args: [stopengines]
            lua: Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)
        actionStart:
            args: [speedup]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 5.0)
        actionLoop:
            args: [speedup]
            lua: Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 1.0)
        actionStart:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -5.0)
        actionLoop:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -1.0)

        actionStart:
            args: [antigravity]
            lua: if antigrav ~= nil then antigrav.toggle() end
        actionStart:
            args: [warp]
            lua: if warpdrive ~= nil then warpdrive.activateWarp() end