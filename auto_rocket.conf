# This is a file describing a standard autoconfiguration, do not edit.
# See custom/sample.conf for a more generic template and explanation on the syntax.

name: Auto Rocket

slots:
    core:
        class: CoreUnit
    antigrav:
        class: AntiGravityGeneratorUnit
    warpdrive:
        class: WarpDriveUnit
    atmofueltank:
        class: AtmoFuelContainer
        select: all
    spacefueltank:
        class: SpaceFuelContainer
        select: all
    rocketfueltank:
        class: RocketFuelContainer
        select: all
    gyro:
        class: GyroUnit
    weapon:
        class: WeaponUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual

handlers:
    unit:
        start:
            lua: |
                Nav = Navigator.new(system, core, unit)
                Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000})
                Nav.axisCommandManager:setTargetGroundAltitude(4)

                -- element widgets
                -- For now we have to alternate between PVP and non-PVP widgets to have them on the same side.
                _autoconf.displayCategoryPanel(weapon, weapon_size, L_TEXT("ui_lua_widget_weapon", "Weapons"), "weapon", true)
                core.show()
                _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_periscope", "Periscope"), "periscope")
                placeRadar = true
                if atmofueltank_size > 0 then
                    _autoconf.displayCategoryPanel(atmofueltank, atmofueltank_size, L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"), "fuel_container")
                    if placeRadar then
                        _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                        placeRadar = false
                    end
                end
                if spacefueltank_size > 0 then
                    _autoconf.displayCategoryPanel(spacefueltank, spacefueltank_size, L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"), "fuel_container")
                    if placeRadar then
                        _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                        placeRadar = false
                    end
                end
                _autoconf.displayCategoryPanel(rocketfueltank, rocketfueltank_size, L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"), "fuel_container")
                if placeRadar then -- We either have only rockets or no fuel tanks at all, uncommon for usual vessels
                    _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                    placeRadar = false
                end
                if antigrav ~= nil then antigrav.show() end
                if warpdrive ~= nil then warpdrive.show() end
                if gyro ~= nil then gyro.show() end

                -- freeze the player in he is remote controlling the construct
                if Nav.control.isRemoteControlled() == 1 then
                    system.freeze(1)
                end

                -- landing gear
                -- make sure every gears are synchonized with the first
                gearExtended = (Nav.control.isAnyLandingGearExtended() == 1) -- make sure it's a lua boolean
                if gearExtended then
                    Nav.control.extendLandingGears()
                else
                    Nav.control.retractLandingGears()
                end

                velocityPanel = system.createWidgetPanel("Velocity")
                velocityWidget = system.createWidget(velocityPanel, "value")
                velocityXData = system.createData()
                velocityYData = system.createData()
                velocityZData = system.createData()
                system.addDataToWidget(velocityXData, velocityWidget)
                system.addDataToWidget(velocityYData, velocityWidget)
                system.addDataToWidget(velocityZData, velocityWidget)


                autopilotPanel = system.createWidgetPanel("Autopilot")
                autopilotWidget = system.createWidget(autopilotPanel, "value")
                modeWidgetData = system.createData()
                system.addDataToWidget(modeWidgetData, autopilotWidget)
                stageWidgetData = system.createData()
                system.addDataToWidget(stageWidgetData, autopilotWidget)

                debugPanel = system.createWidgetPanel("Debug")
                debugWidget = system.createWidget(debugPanel, "value")
                debugData1 = system.createData()
                debugData2 = system.createData()
                debugData3 = system.createData()
                debugData4 = system.createData()
                debugData5 = system.createData()
                debugData6 = system.createData()
                system.addDataToWidget(debugData1, debugWidget)
                system.addDataToWidget(debugData2, debugWidget)
                system.addDataToWidget(debugData3, debugWidget)
                system.addDataToWidget(debugData4, debugWidget)
                system.addDataToWidget(debugData5, debugWidget)
                system.addDataToWidget(debugData6, debugWidget)

                updateValueWidgetData = function(widget, label, value, units)
                    local data = '{"label": "_LABEL_", "value": "_VALUE_", "unit": "_UNIT_"}'
                    data = string.gsub(data, '_LABEL_', label)
                    data = string.gsub(data, '_VALUE_', value)
                    data = string.gsub(data, '_UNIT_', units or '')
                    system.updateData(widget, data)
                end

                updateAutopilotWidget = function(mode, stage)
                    local autopilotModeName = ""

                    if (autopilotMode == AUTOPILOT_MODE_MANUAL) then
                        autopilotModeName = 'Manual (1)'
                    elseif autopilotMode == AUTOPILOT_MODE_ATMO_HOVER then
                        autopilotModeName = "Atmo Hover (2)"
                    elseif autopilotMode == AUTOPILOT_MODE_STATIONKEEPING then
                        autopilotModeName = "Space Stationkeeping (3)"
                    elseif autopilotMode == AUTOPILOT_MODE_LAUNCH then
                        autopilotModeName = "Launch (4)"
                    end

                    updateValueWidgetData(modeWidgetData, 'MODE', autopilotModeName)
                    updateValueWidgetData(stageWidgetData, 'STAGE', autopilotStage)
                end

                setAutopilotMode = function (newMode)
                    autopilotMode = newMode

                    if autopilotMode == AUTOPILOT_MODE_MANUAL then
                        pitchInput = 0
                        rollInput = 0
                        yawInput = 0
                        brakeInput = 0
                        autoBrakeEnabled = false
                        stopAutoOrientation()
                    end

                    if autopilotMode == AUTOPILOT_MODE_ATMO_HOVER then
                        startAutoOrientation()
                    end

                    setAutopilotStage(0)
                end
                
                setAutopilotStage = function (newStage)
                    autopilotStage = newStage
                    updateAutopilotWidget()

                    if autopilotMode == AUTOPILOT_MODE_LAUNCH then
                        if autopilotStage == LAUNCH_STAGE_IDLE then
                            autoBrakeEnabled = true
                            startAutoOrientation()
                            setBoosters(false)
                        elseif autopilotStage == LAUNCH_STAGE_BOOSTING then 
                            autoBrakeEnabled = false
                            setBoosters(true)
                        elseif autopilotStage == LAUNCH_STAGE_COAST then
                            autoBrakeEnabled = false
                            setBoosters(false)
                        elseif autopilotStage == LAUNCH_STAGE_PASSIVE_BRAKING then
                            autoBrakeEnabled = true
                            setBoosters(false)
                        elseif autopilotStage == LAUNCH_STAGE_ROCKET_BRAKING then
                            autoBrakeEnabled = true
                            setBoosters(true)
                        end
                    end
                end

                -- Initial auto pilot mode
                setAutopilotMode(AUTOPILOT_MODE_ATMO_HOVER)

                updateAutopilot = function() 
                    if autopilotMode == AUTOPILOT_MODE_LAUNCH then
                        local alt = core.getAltitude()
                        local targetAlt = 70
                        local airBrakeBufferAlt = 200
                        local maxAlt = 1000
                        local vel = vec3(core.getVelocity())
                        local accel = vec3(core.getAcceleration())

                        if autopilotStage == LAUNCH_STAGE_BOOSTING then
                            if alt > maxAlt then 
                                setAutopilotStage(LAUNCH_STAGE_COAST)
                            end
                        elseif autopilotStage == LAUNCH_STAGE_COAST then
                            brakeAccel = AIRBRAKE_MAX_FORCE  / core.getConstructMass()
                            brakeDist = vel.z * vel.z / (2 * (brakeAccel))
                            landingDist = alt - (targetAlt + airBrakeBufferAlt)

                            if landingDist < brakeDist and vel.z < 0 then
                                setAutopilotStage(LAUNCH_STAGE_PASSIVE_BRAKING)
                            end
                        elseif autopilotStage == LAUNCH_STAGE_PASSIVE_BRAKING then
                            brakeAccel = ROCKET_MAX_FORCE / core.getConstructMass()
                            local gravAccel = -core.g()
                            local airResistance = core.g() + accel.z
                            brakeDist = (vel.z / 2) * (vel.z / (brakeAccel + gravAccel + airResistance * 0.8))
                            landingDist = alt - targetAlt

                            if landingDist < brakeDist then
                                setAutopilotStage(LAUNCH_STAGE_ROCKET_BRAKING)
                            end
                        elseif autopilotStage == LAUNCH_STAGE_ROCKET_BRAKING then
                            if vel.z >= 0 then
                                setAutopilotStage(LAUNCH_STAGE_IDLE)
                            end
                        end
                    end
                end

                updatePanels = function() 
                    local vel = vec3(core.getVelocity())
                    updateValueWidgetData(velocityXData, 'x', vel.x)
                    updateValueWidgetData(velocityYData, 'y', vel.y)
                    updateValueWidgetData(velocityZData, 'z', vel.z)

                    updateValueWidgetData(stageWidgetData, 'STAGE', autopilotStage)

                    updateValueWidgetData(debugData1, 'tx', xTargetVel)
                    updateValueWidgetData(debugData2, 'ty', yTargetVel)
                    updateValueWidgetData(debugData3, 'tz', zTargetVel)

                    updateValueWidgetData(debugData4, 'px', ta_accel.x)
                    updateValueWidgetData(debugData5, 'py', ta_accel.y)
                    updateValueWidgetData(debugData6, 'pz', ta_accel.z)
                end

                setBoosters = function (enabled)
                    if enabled then
                        Nav.boosterState = 1
                    else 
                        Nav.boosterState = 0
                    end
                    Nav.boosterStateHasChanged = true
                end
        stop:
            lua: |
                _autoconf.hideCategoryPanels()
                if antigrav ~= nil then antigrav.hide() end
                if warpdrive ~= nil then warpdrive.hide() end
                if gyro ~= nil then gyro.hide() end
                core.hide()
                Nav.control.switchOffHeadlights()

    system:
        start:
            lua: |
                autopilotMode = 0
                autopilotStage = 0

                pitchInput = 0
                rollInput = 0
                yawInput = 0
                brakeInput = 0

                brakeAccel = 0
                brakeDist = 0
                landingDist = 0

                targetRollDeg =  0
                targetPitchDeg =  0

                longitudinalAcceleration = 0
                lateralAcceleration = 0 
                verticalAcceleration = 0

                rollPID = pid.new(0.2, 0, 10)
                pitchPID = pid.new(0.2, 0, 10)

                xAccelPID = pid.new(1, 0, 5)
                yAccelPID = pid.new(1, 0, 5)
                zAccelPID = pid.new(1, 0, 5)

                ta_accel = vec3(0, 0, 0)

                xTargetVel = 0
                yTargetVel = 0
                zTargetVel = 0

                autoBrakeEnabled = false
                autoOrientationEnabled = false

                MAX_ACCELERATION = 1000

                ROCKET_MAX_FORCE = 500000
                AIRBRAKE_MAX_FORCE = 250000 -- 1 / 8 of max since actual force is relative to airspeed

                AUTOPILOT_MODE_MANUAL = 1
                AUTOPILOT_MODE_ATMO_HOVER = 2
                AUTOPILOT_MODE_STATIONKEEPING = 3
                AUTOPILOT_MODE_LAUNCH = 4

                LAUNCH_STAGE_IDLE = 0
                LAUNCH_STAGE_BOOSTING = 1
                LAUNCH_STAGE_COAST = 2
                LAUNCH_STAGE_PASSIVE_BRAKING = 3
                LAUNCH_STAGE_ROCKET_BRAKING = 4

                startAutoOrientation = function() 
                    autoOrientationEnabled = true
                    targetRollDeg =  0
                    targetPitchDeg =  0
                end

                stopAutoOrientation = function()
                    autoOrientationEnabled = false
                end

                isManualTranslationEnabled = function()
                    return autopilotMode == AUTOPILOT_MODE_MANUAL
                end

                function isTranslationAssistEnabled()
                    return  autopilotMode == AUTOPILOT_MODE_ATMO_HOVER
                end

                function isManualRotationEnabled() 
                    return autopilotMode == AUTOPILOT_MODE_MANUAL or autopilotMode == AUTOPILOT_MODE_STATIONKEEPING
                end

        flush:
            lua: |
                updateAutopilot()

                -- constants: use 'myvar = defaultValue --export: description' to expose the variable in context menu

                local pitchSpeedFactor = 0.8 --export: This factor will increase/decrease the player input along the pitch axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local yawSpeedFactor =  1 --export: This factor will increase/decrease the player input along the yaw axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
                local brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local autoRoll = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
                local autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01

                local turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
                local turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local torqueFactor = 2 -- Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                -- validate params
                pitchSpeedFactor = math.max(pitchSpeedFactor, 0.01)
                yawSpeedFactor = math.max(yawSpeedFactor, 0.01)
                rollSpeedFactor = math.max(rollSpeedFactor, 0.01)
                torqueFactor = math.max(torqueFactor, 0.01)
                brakeSpeedFactor = math.max(brakeSpeedFactor, 0.01)
                brakeFlatFactor = math.max(brakeFlatFactor, 0.01)
                autoRollFactor = math.max(autoRollFactor, 0.01)
                turnAssistFactor = math.max(turnAssistFactor, 0.01)

                -- final inputs
                local finalPitchInput = pitchInput + system.getControlDeviceForwardInput()
                local finalRollInput = rollInput + system.getControlDeviceYawInput()
                local finalYawInput = yawInput - system.getControlDeviceLeftRightInput()
                local finalBrakeInput = brakeInput

                if autoBrakeEnabled then
                    finalBrakeInput = 1
                end

                -- Axis
                local worldVertical = vec3(core.getWorldVertical()) -- along gravity
                local constructUp = vec3(core.getConstructWorldOrientationUp())
                local constructForward = vec3(core.getConstructWorldOrientationForward())
                local constructRight = vec3(core.getConstructWorldOrientationRight())
                local constructVelocity = vec3(core.getWorldVelocity())
                local constructVelocityDir = vec3(core.getWorldVelocity()):normalize()
                local currentRollDeg = getRoll(worldVertical, constructForward, constructRight)
                local currentRollDegAbs = math.abs(currentRollDeg)
                local currentRollDegSign = utils.sign(currentRollDeg)
                local constructAngularVelocity = vec3(core.getWorldAngularVelocity())
                local constructYawVelocity = constructAngularVelocity:dot(constructUp)
                local targetAngularVelocity = nil

                -- Rotation

                if autoOrientationEnabled then
                    local currentRollDeg = getRoll(worldVertical, constructForward, constructRight)
                    local currentPitchDeg = -math.asin(constructForward:dot(worldVertical)) * constants.rad2deg
                    rollPID:inject(targetRollDeg - currentRollDeg)
                    pitchPID:inject(targetPitchDeg - currentPitchDeg)
    
                    local constructYawTargetVelocity = 0 ---combinedRollYawInput * yawSpeedFactor
                    local constructYawTargetAcceleration = 3 * (constructYawTargetVelocity - constructYawVelocity)
    
                    targetAngularVelocity = rollPID:get() * constructForward
                                                            + pitchPID:get() * constructRight
                                                            + finalYawInput * yawSpeedFactor * constructUp
                else
                    targetAngularVelocity = finalPitchInput * pitchSpeedFactor * constructRight
                                                    + finalRollInput * rollSpeedFactor * constructForward
                                                    + finalYawInput * yawSpeedFactor * constructUp
                end

                -- Engine commands
                local keepCollinearity = 1 -- for easier reading
                local tolerancePercentToSkipOtherPriorities = 1 -- if we are within this tolerance (in%), we don't go to the next priorities

                -- Rotation
                local angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)
                local airAcceleration = vec3(core.getWorldAirFrictionAngularAcceleration())
                angularAcceleration = angularAcceleration - airAcceleration -- Try to compensate air friction
                Nav:setEngineTorqueCommand('torque', angularAcceleration, keepCollinearity, 'airfoil', '', '', tolerancePercentToSkipOtherPriorities)

                -- Brakes
                local brakeAcceleration = -finalBrakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)
                Nav:setEngineForceCommand('brake', brakeAcceleration)

                if isManualTranslationEnabled() then
                    -- Longitudinal Translation
                    local longitudinalEngineTags = 'thrust analog longitudinal'
                    Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration * constructForward, keepCollinearity)

                    -- Lateral Translation
                    local lateralStrafeEngineTags = 'thrust analog lateral'
                    Nav:setEngineForceCommand(lateralStrafeEngineTags, lateralAcceleration * constructRight, keepCollinearity)

                    -- Vertical Translation
                    local verticalStrafeEngineTags = 'thrust analog vertical'
                    Nav:setEngineForceCommand(verticalStrafeEngineTags, verticalAcceleration * constructUp, keepCollinearity)
                
                elseif isTranslationAssistEnabled() then
                    local currentVelocity = vec3(core.getVelocity())
                    xAccelPID:inject(xTargetVel - currentVelocity.x)
                    yAccelPID:inject(yTargetVel - currentVelocity.y)
                    zAccelPID:inject(zTargetVel - currentVelocity.z)

                    ta_accel = xAccelPID:get() * constructRight + yAccelPID:get() * constructForward + zAccelPID:get() * constructUp - vec3(core.getWorldGravity())
                    local engineTags = 'thrust analog vertical' --'all'
                    Nav:setEngineForceCommand(engineTags, ta_accel, keepCollinearity)
                end

                -- Rockets
                Nav:setBoosterCommand('rocket_engine')

        update:
            lua: |
                Nav:update()
                updatePanels()

        actionStart:
            args: [gear]
            lua: |
                gearExtended = not gearExtended
                if gearExtended then
                    Nav.control.extendLandingGears()
                else
                    Nav.control.retractLandingGears()
                end

        actionStart:
            args: [light]
            lua: |
                if Nav.control.isAnyHeadlightSwitchedOn() == 1 then
                    Nav.control.switchOffHeadlights()
                else
                    Nav.control.switchOnHeadlights()
                end

        actionStart:
            args: [forward]
            lua: |
                if isManualRotationEnabled() then
                    pitchInput = -1
                elseif autopilotMode == AUTOPILOT_MODE_ATMO_HOVER then
                    targetPitchDeg = -10
                end 
            
        actionStop:
            args: [forward]
            lua: |
                if isManualRotationEnabled() then
                    pitchInput = 0
                elseif autopilotMode == AUTOPILOT_MODE_ATMO_HOVER then
                    targetPitchDeg = 0 
                end
                
        actionStart:
            args: [backward]
            lua: |
                if isManualRotationEnabled() then
                    pitchInput = 1
                elseif autopilotMode == AUTOPILOT_MODE_ATMO_HOVER then
                    targetPitchDeg = 10
                end

        actionStop:
            args: [backward]
            lua: |
                if isManualRotationEnabled() then
                    pitchInput = 0
                elseif autopilotMode == AUTOPILOT_MODE_ATMO_HOVER then
                    targetPitchDeg = 0 
                end

        actionStart:
            args: [left]
            lua: |
                if isManualRotationEnabled() then
                    yawInput = -1
                end

        actionStop:
            args: [left]
            lua: |
                if isManualRotationEnabled() then
                    yawInput = 0
                end

        actionStart:
            args: [right]
            lua: |
                if isManualRotationEnabled() then
                    yawInput = 1
                end

        actionStop:
            args: [right]
            lua: |
                if isManualRotationEnabled() then
                    yawInput = 0
                end

        actionStart:
            args: [yawright]
            lua:  |
                if isManualRotationEnabled() then
                    rollInput = -1
                elseif autopilotMode == AUTOPILOT_MODE_ATMO_HOVER then
                    targetRollDeg = -10 
                end


        actionStop:
            args: [yawright]
            lua: |
                if isManualRotationEnabled() then
                    rollInput = 0
                elseif autopilotMode == AUTOPILOT_MODE_ATMO_HOVER then
                    targetRollDeg = 0
                end


        actionStart:
            args: [yawleft]
            lua:  |
                if isManualRotationEnabled() then
                    rollInput = 1
                elseif autopilotMode == AUTOPILOT_MODE_ATMO_HOVER then
                    targetRollDeg = 10
                end


        actionStop:
            args: [yawleft]
            lua:  |
                if isManualRotationEnabled() then
                    rollInput = 0
                elseif autopilotMode == AUTOPILOT_MODE_ATMO_HOVER then
                    targetRollDeg = 0
                end

        actionStart:
            args: [straferight]
            lua: |
                if isManualTranslationEnabled() then
                    lateralAcceleration = MAX_ACCELERATION
                elseif isTranslationAssistEnabled() then
                    xTargetVel = 10
                end
            
        actionStop:
            args: [straferight]
            lua: |
                if isManualTranslationEnabled() then
                    lateralAcceleration = 0
                elseif isTranslationAssistEnabled() then
                    xTargetVel = 0
                end

        actionStart:
            args: [strafeleft]
            lua: |
                if isManualTranslationEnabled() then
                    lateralAcceleration = -MAX_ACCELERATION
                elseif isTranslationAssistEnabled() then
                    xTargetVel = -10
                end

        actionStop:
            args: [strafeleft]
            lua: |
                if isManualTranslationEnabled() then
                    lateralAcceleration = 0
                elseif isTranslationAssistEnabled() then
                    xTargetVel = 0
                end

        actionStart:
            args: [up]
            lua: |
                if isManualTranslationEnabled() then
                    verticalAcceleration = MAX_ACCELERATION
                elseif isTranslationAssistEnabled() then
                    zTargetVel = 10
                elseif autopilotMode == AUTOPILOT_MODE_LAUNCH and autopilotStage == 0 then
                    setAutopilotStage(LAUNCH_STAGE_BOOSTING)
                end
                
        actionStop:
            args: [up]
            lua: |
                if isManualTranslationEnabled() then
                    verticalAcceleration = 0
                elseif isTranslationAssistEnabled() then
                    zTargetVel = 0
                end
                
        actionStart:
            args: [down]
            lua: |
                if isManualTranslationEnabled() then
                    verticalAcceleration = -MAX_ACCELERATION
                elseif isTranslationAssistEnabled() then
                    zTargetVel = -10
                end
                
        actionStop:
            args: [down]
            lua: |
                if isManualTranslationEnabled() then
                    verticalAcceleration = 0
                elseif isTranslationAssistEnabled() then
                    zTargetVel = 0
                end

        actionStart:
            args: [groundaltitudeup]
            lua:  |
                Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)

        actionLoop:
            args: [groundaltitudeup]
            lua: |
                Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)

        actionStart:
            args: [groundaltitudedown]
            lua: |
                Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)


        actionLoop:
            args: [groundaltitudedown]
            lua:  |
                Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)

        actionStart:
            args: [brake]
            lua: |
                if isManualTranslationEnabled() then
                    brakeInput = brakeInput + 1
                end

        actionStop:
            args: [brake]
            lua:  |
                if isManualTranslationEnabled() then
                    brakeInput = brakeInput - 1
                end

        actionStart:
            args: [booster]
            lua:  |
                if isManualTranslationEnabled() then
                    Nav:toggleBoosters()
                end

        actionStart:
            args: [stopengines]
            lua: |
                if isManualTranslationEnabled() then
                     Nav.axisCommandManager:resetCommand(axisCommandId.vertical)
                end

        actionStart:
            args: [speedup]
            lua:  |
                if isManualTranslationEnabled() then
                    longitudinalAcceleration = MAX_ACCELERATION
                elseif isTranslationAssistEnabled() then
                    yTargetVel = 10
                end
                
        actionStop:
            args: [speedup]
            lua:  |
                if isManualTranslationEnabled() then
                    longitudinalAcceleration = 0
                elseif isTranslationAssistEnabled() then
                    yTargetVel = 0
                end

        actionStart:
            args: [speeddown]
            lua:  |
                if isManualTranslationEnabled() then
                    longitudinalAcceleration = -MAX_ACCELERATION
                elseif isTranslationAssistEnabled() then
                    yTargetVel = -10
                end

        actionStop:
            args: [speeddown]
            lua:  |
                if isManualTranslationEnabled() then
                    longitudinalAcceleration = 0
                elseif isTranslationAssistEnabled() then
                    yTargetVel = 0
                end

        actionStart:
            args: [antigravity]
            lua:  |
                if autopilotMode == AUTOPILOT_MODE_MANUAL then
                    if antigrav ~= nil then antigrav.toggle() end
                end

        actionStart:
            args: [warp]
            lua:  |
                if autopilotMode == AUTOPILOT_MODE_MANUAL then
                    if warpdrive ~= nil then warpdrive.activateWarp() end
                end


        actionStart:
            args: [option1]
            lua:  |
                setAutopilotMode(AUTOPILOT_MODE_MANUAL)

        actionStart:
            args: [option2]
            lua:  |
                setAutopilotMode(AUTOPILOT_MODE_ATMO_HOVER)

        actionStart:
            args: [option3]
            lua:  |
                setAutopilotMode(AUTOPILOT_MODE_LAUNCH)