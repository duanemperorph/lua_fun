# This is a file describing a standard autoconfiguration, do not edit.
# See custom/sample.conf for a more generic template and explanation on the syntax.

name: Auto Rocket

slots:
    core:
        class: CoreUnit
    antigrav:
        class: AntiGravityGeneratorUnit
    warpdrive:
        class: WarpDriveUnit
    atmofueltank:
        class: AtmoFuelContainer
        select: all
    spacefueltank:
        class: SpaceFuelContainer
        select: all
    rocketfueltank:
        class: RocketFuelContainer
        select: all
    gyro:
        class: GyroUnit
    weapon:
        class: WeaponUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual

handlers:
    unit:
        start:
            lua: |
                Nav = Navigator.new(system, core, unit)
                Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000})
                Nav.axisCommandManager:setTargetGroundAltitude(4)

                -- element widgets
                -- For now we have to alternate between PVP and non-PVP widgets to have them on the same side.
                _autoconf.displayCategoryPanel(weapon, weapon_size, L_TEXT("ui_lua_widget_weapon", "Weapons"), "weapon", true)
                core.show()
                _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_periscope", "Periscope"), "periscope")
                placeRadar = true
                if atmofueltank_size > 0 then
                    _autoconf.displayCategoryPanel(atmofueltank, atmofueltank_size, L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"), "fuel_container")
                    if placeRadar then
                        _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                        placeRadar = false
                    end
                end
                if spacefueltank_size > 0 then
                    _autoconf.displayCategoryPanel(spacefueltank, spacefueltank_size, L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"), "fuel_container")
                    if placeRadar then
                        _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                        placeRadar = false
                    end
                end
                _autoconf.displayCategoryPanel(rocketfueltank, rocketfueltank_size, L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"), "fuel_container")
                if placeRadar then -- We either have only rockets or no fuel tanks at all, uncommon for usual vessels
                    _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                    placeRadar = false
                end
                if antigrav ~= nil then antigrav.show() end
                if warpdrive ~= nil then warpdrive.show() end
                if gyro ~= nil then gyro.show() end

                -- freeze the player in he is remote controlling the construct
                if Nav.control.isRemoteControlled() == 1 then
                    system.freeze(1)
                end

                -- landing gear
                -- make sure every gears are synchonized with the first
                gearExtended = (Nav.control.isAnyLandingGearExtended() == 1) -- make sure it's a lua boolean
                if gearExtended then
                    Nav.control.extendLandingGears()
                else
                    Nav.control.retractLandingGears()
                end

                autopilotPanel = system.createWidgetPanel("Autopilot")
                autopilotWidget = system.createWidget(autopilotPanel, "value")
                modeWidgetData = system.createData()
                system.addDataToWidget(modeWidgetData, autopilotWidget)
                stateWidgetData = system.createData()
                system.addDataToWidget(stateWidgetData, autopilotWidget)

                updateAutopilotWidget = function(mode, state)
                    updateValueWidgetData(modeWidgetData, 'MODE', autopilotMode)
                    updateValueWidgetData(stateWidgetData, 'STATE', autopilotState)
                end

                updateValueWidgetData = function(widget, label, value, units)
                    local data = '{"label": "_LABEL_", "value": "_VALUE_", "unit": "_UNIT_"}'
                    data = string.gsub(data, '_LABEL_', label)
                    data = string.gsub(data, '_VALUE_', value)
                    data = string.gsub(data, '_UNIT_', units or '')
                    system.updateData(widget, data)
                end

                setAutopilotMode = function (newMode)
                    autopilotMode = newMode
                    autopilotState = 0
                    autoBrakeEnabled = false
                    autoOrientationEnabled = false

                    if autopilotMode == AUTOPILOT_MODE_MANUAL then
                        pitchInput = 0
                        rollInput = 0
                        yawInput = 0
                        brakeInput = 0
                    end

                    if autopilotMode == AUTOPILOT_MODE_AUTOSTABILIZATION then
                        autoBrakeEnabled = true
                        autoOrientationEnabled = true
                    end

                    updateAutopilotWidget()
                end
                
                setAutopilotState = function (newState)
                    updateAutopilotWidget()
                end

                setAutopilotMode(AUTOPILOT_MODE_AUTOSTABILIZATION)
        stop:
            lua: |
                _autoconf.hideCategoryPanels()
                if antigrav ~= nil then antigrav.hide() end
                if warpdrive ~= nil then warpdrive.hide() end
                if gyro ~= nil then gyro.hide() end
                core.hide()
                Nav.control.switchOffHeadlights()

    system:
        start:
            lua: |
                autopilotMode = 0
                autopilotState = 0

                pitchInput = 0
                rollInput = 0
                yawInput = 0
                brakeInput = 0

                autoBrakeEnabled = false
                autoOrientationEnabled = false

                AUTOPILOT_MODE_MANUAL = 1
                AUTOPILOT_MODE_AUTOSTABILIZATION = 2

                isManualControlEnabled = function () 
                    return autopilotMode == AUTOPILOT_MODE_MANUAL 
                end

        flush:
            lua: |
                -- constants: use 'myvar = defaultValue --export: description' to expose the variable in context menu

                local pitchSpeedFactor = 0.8 --export: This factor will increase/decrease the player input along the pitch axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local yawSpeedFactor =  1 --export: This factor will increase/decrease the player input along the yaw axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
                local brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local autoRoll = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
                local autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01

                local turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
                local turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local torqueFactor = 2 -- Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                -- validate params
                pitchSpeedFactor = math.max(pitchSpeedFactor, 0.01)
                yawSpeedFactor = math.max(yawSpeedFactor, 0.01)
                rollSpeedFactor = math.max(rollSpeedFactor, 0.01)
                torqueFactor = math.max(torqueFactor, 0.01)
                brakeSpeedFactor = math.max(brakeSpeedFactor, 0.01)
                brakeFlatFactor = math.max(brakeFlatFactor, 0.01)
                autoRollFactor = math.max(autoRollFactor, 0.01)
                turnAssistFactor = math.max(turnAssistFactor, 0.01)

                -- final inputs
                local finalPitchInput = pitchInput + system.getControlDeviceForwardInput()
                local finalRollInput = rollInput + system.getControlDeviceYawInput()
                local finalYawInput = yawInput - system.getControlDeviceLeftRightInput()
                local finalBrakeInput = brakeInput

                if autoBrakeEnabled then
                    finalBrakeInput = 1
                end

                -- Axis
                local worldVertical = vec3(core.getWorldVertical()) -- along gravity
                local constructUp = vec3(core.getConstructWorldOrientationUp())
                local constructForward = vec3(core.getConstructWorldOrientationForward())
                local constructRight = vec3(core.getConstructWorldOrientationRight())
                local constructVelocity = vec3(core.getWorldVelocity())
                local constructVelocityDir = vec3(core.getWorldVelocity()):normalize()
                local currentRollDeg = getRoll(worldVertical, constructForward, constructRight)
                local currentRollDegAbs = math.abs(currentRollDeg)
                local currentRollDegSign = utils.sign(currentRollDeg)

                -- Rotation
                local constructAngularVelocity = vec3(core.getWorldAngularVelocity())
                local targetAngularVelocity = finalPitchInput * pitchSpeedFactor * constructRight
                                                + finalRollInput * rollSpeedFactor * constructForward
                                                + finalYawInput * yawSpeedFactor * constructUp

                -- In atmosphere?
                if worldVertical:len() > 0.01 and unit.getAtmosphereDensity() > 0.0 then
                    local autoRollRollThreshold = 1.0
                    -- autoRoll on AND currentRollDeg is big enough AND player is not rolling
                    if autoRoll == true and currentRollDegAbs > autoRollRollThreshold and finalRollInput == 0 then
                        local targetRollDeg = utils.clamp(0,currentRollDegAbs-30, currentRollDegAbs+30);  -- we go back to 0 within a certain limit
                        if (rollPID == nil) then
                            rollPID = pid.new(autoRollFactor * 0.01, 0, autoRollFactor * 0.1) -- magic number tweaked to have a default factor in the 1-10 range
                        end
                        rollPID:inject(targetRollDeg - currentRollDeg)
                        local autoRollInput = rollPID:get()

                        targetAngularVelocity = targetAngularVelocity + autoRollInput * constructForward
                    end
                    local turnAssistRollThreshold = 20.0
                    -- turnAssist AND currentRollDeg is big enough AND player is not pitching or yawing
                    if turnAssist == true and currentRollDegAbs > turnAssistRollThreshold and finalPitchInput == 0 and finalYawInput == 0 then
                        local rollToPitchFactor = turnAssistFactor * 0.1 -- magic number tweaked to have a default factor in the 1-10 range
                        local rollToYawFactor = turnAssistFactor * 0.025 -- magic number tweaked to have a default factor in the 1-10 range

                        -- rescale (turnAssistRollThreshold -> 180) to (0 -> 180)
                        local rescaleRollDegAbs = ((currentRollDegAbs - turnAssistRollThreshold) / (180 - turnAssistRollThreshold)) * 180
                        local rollVerticalRatio = 0
                        if rescaleRollDegAbs < 90 then
                            rollVerticalRatio = rescaleRollDegAbs / 90
                        elseif rescaleRollDegAbs < 180 then
                            rollVerticalRatio = (180 - rescaleRollDegAbs) / 90
                        end

                        rollVerticalRatio = rollVerticalRatio * rollVerticalRatio

                        local turnAssistYawInput = - currentRollDegSign * rollToYawFactor * (1.0 - rollVerticalRatio)
                        local turnAssistPitchInput = rollToPitchFactor * rollVerticalRatio

                        targetAngularVelocity = targetAngularVelocity
                                            + turnAssistPitchInput * constructRight
                                            + turnAssistYawInput * constructUp
                    end
                end

                -- Engine commands
                local keepCollinearity = 1 -- for easier reading
                local dontKeepCollinearity = 0 -- for easier reading
                local tolerancePercentToSkipOtherPriorities = 1 -- if we are within this tolerance (in%), we don't go to the next priorities

                -- Rotation
                local angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)
                local airAcceleration = vec3(core.getWorldAirFrictionAngularAcceleration())
                angularAcceleration = angularAcceleration - airAcceleration -- Try to compensate air friction
                Nav:setEngineTorqueCommand('torque', angularAcceleration, keepCollinearity, 'airfoil', '', '', tolerancePercentToSkipOtherPriorities)

                -- Brakes
                local brakeAcceleration = -finalBrakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)
                Nav:setEngineForceCommand('brake', brakeAcceleration)

                -- Longitudinal Translation
                local longitudinalEngineTags = 'thrust analog longitudinal'
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)
                Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)

                -- Lateral Translation
                local lateralStrafeEngineTags = 'thrust analog lateral'
                local lateralCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)
                local lateralStrafeAcceleration =  Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lateralStrafeEngineTags,axisCommandId.lateral)
                Nav:setEngineForceCommand(lateralStrafeEngineTags, lateralStrafeAcceleration, keepCollinearity)

                -- Vertical Translation
                local verticalStrafeEngineTags = 'thrust analog vertical'
                local verticalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)
                local verticalStrafeAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(verticalStrafeEngineTags,axisCommandId.vertical)
                Nav:setEngineForceCommand(verticalStrafeEngineTags, verticalStrafeAcceleration, keepCollinearity, 'airfoil', 'ground', '', tolerancePercentToSkipOtherPriorities)

                -- Rockets
                Nav:setBoosterCommand('rocket_engine')

        update:
            lua: Nav:update()

        actionStart:
            args: [gear]
            lua: |
                gearExtended = not gearExtended
                if gearExtended then
                    Nav.control.extendLandingGears()
                else
                    Nav.control.retractLandingGears()
                end

        actionStart:
            args: [light]
            lua: |
                if Nav.control.isAnyHeadlightSwitchedOn() == 1 then
                    Nav.control.switchOffHeadlights()
                else
                    Nav.control.switchOnHeadlights()
                end

        actionStart:
            args: [forward]
            lua: |
                if isManualControlEnabled() then
                    pitchInput = pitchInput - 1
                end 
            
        actionStop:
            args: [forward]
            lua: |
                if isManualControlEnabled() then
                    pitchInput = pitchInput + 1
                end
                
        actionStart:
            args: [backward]
            lua: |
                if isManualControlEnabled() then
                    pitchInput = pitchInput + 1
                end

        actionStop:
            args: [backward]
            lua: |
                if isManualControlEnabled() then
                    pitchInput = pitchInput - 1
                end

        actionStart:
            args: [left]
            lua: |
                if isManualControlEnabled() then
                    rollInput = rollInput - 1
                end

        actionStop:
            args: [left]
            lua: |
                if isManualControlEnabled() then
                    rollInput = rollInput + 1
                end

        actionStart:
            args: [right]
            lua: |
                if isManualControlEnabled() then
                    rollInput = rollInput + 1
                end

        actionStop:
            args: [right]
            lua: |
                if isManualControlEnabled() then
                    rollInput = rollInput - 1
                end

        actionStart:
            args: [straferight]
            lua: |
                if isManualControlEnabled() then
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)
                end
            
        actionStop:
            args: [straferight]
            lua: |
                if isManualControlEnabled() then
                    Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)
                end

        actionStart:
            args: [strafeleft]
            lua: |
                if isManualControlEnabled() then
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)
                end

        actionStop:
            args: [strafeleft]
            lua: |
                if isManualControlEnabled() then
                    Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)
                end

        actionStart:
            args: [up]
            lua: |
                if isManualControlEnabled() then
                    Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)
                end
                


        actionStop:
            args: [up]
            lua: |
                if isManualControlEnabled() then
                    Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)
                    Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
                end
                


        actionStart:
            args: [down]
            lua: |
                if isManualControlEnabled() then
                    Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)
                end
                


        actionStop:
            args: [down]
            lua: |
                if isManualControlEnabled() then
                    Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)
                    Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
                end
                


        actionStart:
            args: [groundaltitudeup]
            lua:  |
                if isManualControlEnabled() then
                    Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)
                end


        actionLoop:
            args: [groundaltitudeup]
            lua: |
                if isManualControlEnabled() then
                    Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)
                end



        actionStart:
            args: [groundaltitudedown]
            lua: |
                if isManualControlEnabled() then
                    Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)
                end


        actionLoop:
            args: [groundaltitudedown]
            lua:  |
                if isManualControlEnabled() then
                    Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)
                end


        actionStart:
            args: [yawright]
            lua:  |
                if isManualControlEnabled() then
                    yawInput = yawInput - 1
                end


        actionStop:
            args: [yawright]
            lua: |
                if isManualControlEnabled() then
                    yawInput = yawInput + 1
                end


        actionStart:
            args: [yawleft]
            lua:  |
                if isManualControlEnabled() then
                    yawInput = yawInput + 1
                end


        actionStop:
            args: [yawleft]
            lua:  |
                if isManualControlEnabled() then
                    yawInput = yawInput - 1
                end


        actionStart:
            args: [brake]
            lua: |
                if isManualControlEnabled() then
                    brakeInput = brakeInput + 1
                    local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                    if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                        local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                        if (math.abs(targetSpeed) > constants.epsilon) then
                            Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                        end
                    end
                end

        actionStop:
            args: [brake]
            lua:  |
                if isManualControlEnabled() then
                    brakeInput = brakeInput - 1
                end

        actionLoop:
            args: [brake]
            lua: |
                if isManualControlEnabled() then
                    local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                    if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                        local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                        if (math.abs(targetSpeed) > constants.epsilon) then
                            Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                        end
                    end
                end

        actionStart:
            args: [booster]
            lua:  |
                if isManualControlEnabled() then
                    Nav:toggleBoosters()
                end


        actionStart:
            args: [stopengines]
            lua: |
                if isManualControlEnabled() then
                     Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)
                end

        actionStart:
            args: [speedup]
            lua:  |
                if isManualControlEnabled() then
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 5.0)
                end

        actionLoop:
            args: [speedup]
            lua:  |
                if isManualControlEnabled() then
                    Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 1.0)
                end

        actionStart:
            args: [speeddown]
            lua:  |
                if isManualControlEnabled() then
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -5.0)
                end

        actionLoop:
            args: [speeddown]
            lua:  |
                if isManualControlEnabled() then
                    Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -1.0)
                end

        actionStart:
            args: [antigravity]
            lua:  |
                if isManualControlEnabled() then
                    if antigrav ~= nil then antigrav.toggle() end
                end

        actionStart:
            args: [warp]
            lua:  |
                if isManualControlEnabled() then
                    if warpdrive ~= nil then warpdrive.activateWarp() end
                end


        actionStart:
            args: [option1]
            lua:  |
                setAutopilotMode(AUTOPILOT_MODE_MANUAL)

        actionStart:
            args: [option2]
            lua:  |
                setAutopilotMode(AUTOPILOT_MODE_AUTOSTABILIZATION)